///
/// @Generated by Mockolo
///



import Alamofire
import AuthenticationServices
import FirebaseAnalytics
import FirebaseCore
import FirebaseCrashlytics
import FirebaseMessaging
import Foundation
import LocalDataViewer
import MJRefresh
import MPInjector
import NSObject_Rx
import PKHUD
import RxCocoa
import RxRelay
import RxSwift
import SafariServices
import UIKit
import XCGLogger
@testable import MyProduct
#if os(iOS)
import UIKit
#endif
#if os(macOS)

#endif


class AppHelperMock: AppHelper {
    init() { }


    private(set) var topViewControllerCallCount = 0
    var topViewControllerArgValues = [UIViewController?]()
    var topViewControllerHandler: ((UIViewController?) -> (UIViewController?))?
    func topViewController(_ viewController: UIViewController?) -> UIViewController? {
        topViewControllerCallCount += 1
        topViewControllerArgValues.append(viewController)
        if let topViewControllerHandler = topViewControllerHandler {
            return topViewControllerHandler(viewController)
        }
        return nil
    }
}

class LoginViewInterfaceMock: LoginViewInterface {
    init() { }


}

class MainViewInterfaceMock: MainViewInterface {
    init() { }


}

class DetailViewInterfaceMock: DetailViewInterface {
    init() { }


}

class MainRouterInterfaceMock: MainRouterInterface {
    init() { }
    init(view: MainViewInterface? = nil) {
        self.view = view
    }


    private(set) var viewSetCallCount = 0
    var view: MainViewInterface? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var injectCallCount = 0
    var injectArgValues = [MainViewInterface]()
    var injectHandler: ((MainViewInterface) -> ())?
    func inject(view: MainViewInterface)  {
        injectCallCount += 1
        injectArgValues.append(view)
        if let injectHandler = injectHandler {
            injectHandler(view)
        }
        
    }

    private(set) var navigationToDetailScreenCallCount = 0
    var navigationToDetailScreenArgValues = [PagingUserResponse]()
    var navigationToDetailScreenHandler: ((PagingUserResponse) -> ())?
    func navigationToDetailScreen(user: PagingUserResponse)  {
        navigationToDetailScreenCallCount += 1
        navigationToDetailScreenArgValues.append(user)
        if let navigationToDetailScreenHandler = navigationToDetailScreenHandler {
            navigationToDetailScreenHandler(user)
        }
        
    }

    private(set) var navigationToLoginScreenCallCount = 0
    var navigationToLoginScreenHandler: (() -> ())?
    func navigationToLoginScreen()  {
        navigationToLoginScreenCallCount += 1
        if let navigationToLoginScreenHandler = navigationToLoginScreenHandler {
            navigationToLoginScreenHandler()
        }
        
    }
}

class LoginRouterInterfaceMock: LoginRouterInterface {
    init() { }
    init(view: LoginViewInterface? = nil) {
        self.view = view
    }


    private(set) var viewSetCallCount = 0
    var view: LoginViewInterface? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var injectCallCount = 0
    var injectArgValues = [LoginViewInterface]()
    var injectHandler: ((LoginViewInterface) -> ())?
    func inject(view: LoginViewInterface)  {
        injectCallCount += 1
        injectArgValues.append(view)
        if let injectHandler = injectHandler {
            injectHandler(view)
        }
        
    }

    private(set) var navigationToHomeScreenCallCount = 0
    var navigationToHomeScreenHandler: (() -> ())?
    func navigationToHomeScreen()  {
        navigationToHomeScreenCallCount += 1
        if let navigationToHomeScreenHandler = navigationToHomeScreenHandler {
            navigationToHomeScreenHandler()
        }
        
    }
}

class DetailInteractorInterfaceMock: DetailInteractorInterface {
    init() { }


}

class ConnectivityServiceMock: ConnectivityService {
    init() { }
    init(isNetworkConnection: Bool = false) {
        self.isNetworkConnection = isNetworkConnection
    }


    private(set) var isNetworkConnectionSetCallCount = 0
    var isNetworkConnection: Bool = false { didSet { isNetworkConnectionSetCallCount += 1 } }
}

class MainInteractorInterfaceMock: MainInteractorInterface {
    init() { }
    init(getEventUseCaseInterface: GETEventUseCase = GETEventUseCaseMock(), cleanUserInfoUseCaseInterface: CleanUserInfoUseCase = CleanUserInfoUseCaseMock(), getUserInfoUseCase: GETUserInfoUseCase = GETUserInfoUseCaseMock()) {
        self.getEventUseCaseInterface = getEventUseCaseInterface
        self.cleanUserInfoUseCaseInterface = cleanUserInfoUseCaseInterface
        self.getUserInfoUseCase = getUserInfoUseCase
    }


    private(set) var getEventUseCaseInterfaceSetCallCount = 0
    var getEventUseCaseInterface: GETEventUseCase = GETEventUseCaseMock() { didSet { getEventUseCaseInterfaceSetCallCount += 1 } }

    private(set) var cleanUserInfoUseCaseInterfaceSetCallCount = 0
    var cleanUserInfoUseCaseInterface: CleanUserInfoUseCase = CleanUserInfoUseCaseMock() { didSet { cleanUserInfoUseCaseInterfaceSetCallCount += 1 } }

    private(set) var getUserInfoUseCaseSetCallCount = 0
    var getUserInfoUseCase: GETUserInfoUseCase = GETUserInfoUseCaseMock() { didSet { getUserInfoUseCaseSetCallCount += 1 } }
}

class UserRepositoryInterfaceMock: UserRepositoryInterface {
    init() { }


    private(set) var loginCallCount = 0
    var loginArgValues = [(String, String)]()
    var loginHandler: ((String, String) -> (Single<LoginResponse>))?
    func login(email: String, password: String) -> Single<LoginResponse> {
        loginCallCount += 1
        loginArgValues.append((email, password))
        if let loginHandler = loginHandler {
            return loginHandler(email, password)
        }
        fatalError("loginHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var userInfoCallCount = 0
    var userInfoHandler: (() -> (Single<UserResponse>))?
    func userInfo() -> Single<UserResponse> {
        userInfoCallCount += 1
        if let userInfoHandler = userInfoHandler {
            return userInfoHandler()
        }
        fatalError("userInfoHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var refreshTokenCallCount = 0
    var refreshTokenArgValues = [String]()
    var refreshTokenHandler: ((String) -> (Single<RefreshTokenResponse>))?
    func refreshToken(token: String) -> Single<RefreshTokenResponse> {
        refreshTokenCallCount += 1
        refreshTokenArgValues.append(token)
        if let refreshTokenHandler = refreshTokenHandler {
            return refreshTokenHandler(token)
        }
        fatalError("refreshTokenHandler returns can't have a default value thus its handler must be set")
    }
}

class ApiErrorHandlerMock: ApiErrorHandler {
    init() { }


    private(set) var handleCallCount = 0
    var handleArgValues = [(Error, ScreenType)]()
    var handleHandler: ((Error, ScreenType, (() -> Void)?) -> ())?
    func handle(error: Error, screenType: ScreenType, callback: (() -> Void)?)  {
        handleCallCount += 1
        handleArgValues.append((error, screenType))
        if let handleHandler = handleHandler {
            handleHandler(error, screenType, callback)
        }
        
    }
}

class GETUserInfoUseCaseMock: GETUserInfoUseCase {

    private(set) var repoSetCallCount = 0
    override var repo: UserRepositoryInterface  { didSet { repoSetCallCount += 1 } }

    private(set) var localSetCallCount = 0
    override var local: LocalStorageRepository  { didSet { localSetCallCount += 1 } }

    private(set) var buildUseCaseCallCount = 0
    var buildUseCaseArgValues = [Void]()
    var buildUseCaseHandler: ((Void) -> (Single<UserResponse>))?
    override func buildUseCase(params: Void) -> Single<UserResponse> {
        buildUseCaseCallCount += 1
        buildUseCaseArgValues.append(params)
        if let buildUseCaseHandler = buildUseCaseHandler {
            return buildUseCaseHandler(params)
        }
        fatalError("buildUseCaseHandler returns can't have a default value thus its handler must be set")
    }
}

class CleanUserInfoUseCaseMock: CleanUserInfoUseCase {

    private(set) var cacheParamsSetCallCount = 0
    override var cacheParams: Void?  { didSet { cacheParamsSetCallCount += 1 } }

    private(set) var repoSetCallCount = 0
    override var repo: LocalStorageRepository  { didSet { repoSetCallCount += 1 } }
}

class LocalStorageRepositoryMock: LocalStorageRepository {
    init() { }


    private(set) var getAccessTokenCallCount = 0
    var getAccessTokenHandler: (() -> (String?))?
    func getAccessToken() -> String? {
        getAccessTokenCallCount += 1
        if let getAccessTokenHandler = getAccessTokenHandler {
            return getAccessTokenHandler()
        }
        return nil
    }

    private(set) var setAccessTokenCallCount = 0
    var setAccessTokenArgValues = [String]()
    var setAccessTokenHandler: ((String) -> ())?
    func setAccessToken(newValue: String)  {
        setAccessTokenCallCount += 1
        setAccessTokenArgValues.append(newValue)
        if let setAccessTokenHandler = setAccessTokenHandler {
            setAccessTokenHandler(newValue)
        }
        
    }

    private(set) var clearAccessTokenCallCount = 0
    var clearAccessTokenHandler: (() -> ())?
    func clearAccessToken()  {
        clearAccessTokenCallCount += 1
        if let clearAccessTokenHandler = clearAccessTokenHandler {
            clearAccessTokenHandler()
        }
        
    }

    private(set) var getRefreshTokenCallCount = 0
    var getRefreshTokenHandler: (() -> (String?))?
    func getRefreshToken() -> String? {
        getRefreshTokenCallCount += 1
        if let getRefreshTokenHandler = getRefreshTokenHandler {
            return getRefreshTokenHandler()
        }
        return nil
    }

    private(set) var setRefreshTokenCallCount = 0
    var setRefreshTokenArgValues = [String]()
    var setRefreshTokenHandler: ((String) -> ())?
    func setRefreshToken(newValue: String)  {
        setRefreshTokenCallCount += 1
        setRefreshTokenArgValues.append(newValue)
        if let setRefreshTokenHandler = setRefreshTokenHandler {
            setRefreshTokenHandler(newValue)
        }
        
    }

    private(set) var clearRefreshTokenCallCount = 0
    var clearRefreshTokenHandler: (() -> ())?
    func clearRefreshToken()  {
        clearRefreshTokenCallCount += 1
        if let clearRefreshTokenHandler = clearRefreshTokenHandler {
            clearRefreshTokenHandler()
        }
        
    }

    private(set) var getLoginStateCallCount = 0
    var getLoginStateHandler: (() -> (LoginState))?
    func getLoginState() -> LoginState {
        getLoginStateCallCount += 1
        if let getLoginStateHandler = getLoginStateHandler {
            return getLoginStateHandler()
        }
        fatalError("getLoginStateHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var getUserInfoCallCount = 0
    var getUserInfoHandler: (() -> (UserResponse?))?
    func getUserInfo() -> UserResponse? {
        getUserInfoCallCount += 1
        if let getUserInfoHandler = getUserInfoHandler {
            return getUserInfoHandler()
        }
        return nil
    }

    private(set) var setUserInfoCallCount = 0
    var setUserInfoArgValues = [UserResponse]()
    var setUserInfoHandler: ((UserResponse) -> ())?
    func setUserInfo(newValue: UserResponse)  {
        setUserInfoCallCount += 1
        setUserInfoArgValues.append(newValue)
        if let setUserInfoHandler = setUserInfoHandler {
            setUserInfoHandler(newValue)
        }
        
    }

    private(set) var clearUserInfoCallCount = 0
    var clearUserInfoHandler: (() -> ())?
    func clearUserInfo()  {
        clearUserInfoCallCount += 1
        if let clearUserInfoHandler = clearUserInfoHandler {
            clearUserInfoHandler()
        }
        
    }
}

class LoginInteractorInterfaceMock: LoginInteractorInterface {
    init() { }
    init(loginUseCase: LoginUseCase = LoginUseCaseMock()) {
        self.loginUseCase = loginUseCase
    }


    private(set) var loginUseCaseSetCallCount = 0
    var loginUseCase: LoginUseCase = LoginUseCaseMock() { didSet { loginUseCaseSetCallCount += 1 } }
}

class HomeRepositoryInterfaceMock: HomeRepositoryInterface {
    init() { }


    private(set) var paggingCallCount = 0
    var paggingArgValues = [(Int, PagingSortType)]()
    var paggingHandler: ((Int, PagingSortType) -> (Single<[PagingUserResponse]>))?
    func pagging(page: Int, sort: PagingSortType) -> Single<[PagingUserResponse]> {
        paggingCallCount += 1
        paggingArgValues.append((page, sort))
        if let paggingHandler = paggingHandler {
            return paggingHandler(page, sort)
        }
        fatalError("paggingHandler returns can't have a default value thus its handler must be set")
    }
}

class LoadingHelperMock: LoadingHelper {
    init() { }
    init(isLoading: PublishRelay<Bool>) {
        self._isLoading = isLoading
    }


    private(set) var isLoadingSetCallCount = 0
    private var _isLoading: PublishRelay<Bool>!  { didSet { isLoadingSetCallCount += 1 } }
    var isLoading: PublishRelay<Bool> {
        get { return _isLoading }
        set { _isLoading = newValue }
    }

    private(set) var showLoadingCallCount = 0
    var showLoadingHandler: (() -> ())?
    func showLoading()  {
        showLoadingCallCount += 1
        if let showLoadingHandler = showLoadingHandler {
            showLoadingHandler()
        }
        
    }

    private(set) var hideLoadingCallCount = 0
    var hideLoadingHandler: (() -> ())?
    func hideLoading()  {
        hideLoadingCallCount += 1
        if let hideLoadingHandler = hideLoadingHandler {
            hideLoadingHandler()
        }
        
    }

    private(set) var performCallCount = 0
    var performHandler: (() -> ())?
    func perform()  {
        performCallCount += 1
        if let performHandler = performHandler {
            performHandler()
        }
        
    }
}

class DetailRouterInterfaceMock: DetailRouterInterface {
    init() { }
    init(view: DetailViewInterface? = nil) {
        self.view = view
    }


    private(set) var viewSetCallCount = 0
    var view: DetailViewInterface? = nil { didSet { viewSetCallCount += 1 } }

    private(set) var injectCallCount = 0
    var injectArgValues = [DetailViewInterface]()
    var injectHandler: ((DetailViewInterface) -> ())?
    func inject(view: DetailViewInterface)  {
        injectCallCount += 1
        injectArgValues.append(view)
        if let injectHandler = injectHandler {
            injectHandler(view)
        }
        
    }
}

class DialogManagerMock: DialogManager {
    init() { }


    private(set) var showDialogCallCount = 0
    var showDialogArgValues = [(TypeDialog, String?, String?, String?, String?)]()
    var showDialogHandler: ((TypeDialog, String?, String?, String?, String?, (() -> Void)?, (() -> Void)?) -> ())?
    func showDialog(typeDialog: TypeDialog, title: String?, message: String?, retryButtonLabel: String?, closeButtonLabel: String?, callbackRetry: (() -> Void)?, callbackClose: (() -> Void)?)  {
        showDialogCallCount += 1
        showDialogArgValues.append((typeDialog, title, message, retryButtonLabel, closeButtonLabel))
        if let showDialogHandler = showDialogHandler {
            showDialogHandler(typeDialog, title, message, retryButtonLabel, closeButtonLabel, callbackRetry, callbackClose)
        }
        
    }
}

class PermissionManagerMock: PermissionManager {
    init() { }


    private(set) var requestCallCount = 0
    var requestArgValues = [(PermissionType, UIApplication)]()
    var requestHandler: ((PermissionType, UIApplication) -> ())?
    func request(type: PermissionType, application: UIApplication)  {
        requestCallCount += 1
        requestArgValues.append((type, application))
        if let requestHandler = requestHandler {
            requestHandler(type, application)
        }
        
    }
}

class LoginUseCaseMock: LoginUseCase {

    private(set) var repoSetCallCount = 0
    override var repo: UserRepositoryInterface  { didSet { repoSetCallCount += 1 } }

    private(set) var localSetCallCount = 0
    override var local: LocalStorageRepository  { didSet { localSetCallCount += 1 } }

    private(set) var buildUseCaseCallCount = 0
    var buildUseCaseArgValues = [LoginUseCaseParams]()
    var buildUseCaseHandler: ((LoginUseCaseParams) -> (Completable))?
    override func buildUseCase(params: LoginUseCaseParams) -> Completable {
        buildUseCaseCallCount += 1
        buildUseCaseArgValues.append(params)
        if let buildUseCaseHandler = buildUseCaseHandler {
            return buildUseCaseHandler(params)
        }
        fatalError("buildUseCaseHandler returns can't have a default value thus its handler must be set")
    }
}

class GETEventUseCaseMock: GETEventUseCase {

    private(set) var repoSetCallCount = 0
    override var repo: HomeRepositoryInterface  { didSet { repoSetCallCount += 1 } }

    private(set) var buildUseCaseCallCount = 0
    var buildUseCaseArgValues = [GETEventUseCaseParams]()
    var buildUseCaseHandler: ((GETEventUseCaseParams) -> (Single<([PagingUserResponse], PagingType)>))?
    override func buildUseCase(params: GETEventUseCaseParams) -> Single<([PagingUserResponse], PagingType)> {
        buildUseCaseCallCount += 1
        buildUseCaseArgValues.append(params)
        if let buildUseCaseHandler = buildUseCaseHandler {
            return buildUseCaseHandler(params)
        }
        fatalError("buildUseCaseHandler returns can't have a default value thus its handler must be set")
    }
}

